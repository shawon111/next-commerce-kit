// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// database schema
model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(CUSTOMER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders     Order[]
  cartItems  CartItem[]

  products   Product[]
}

model Product {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  price       Float
  stock       Int
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // relations
  categories  Category[]     
  cartItems   CartItem[]  
  orderItems  OrderItem[]

  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  products Product[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  payments   Payment[]    // back-relation for Payment.order
  total      Float
  status     OrderStatus  @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Payment {
  id         String       @id @default(cuid())
  order      Order        @relation(fields: [orderId], references: [id])
  orderId    String
  amount     Float
  method     PaymentMethod
  status     PaymentStatus
  createdAt  DateTime     @default(now())
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}